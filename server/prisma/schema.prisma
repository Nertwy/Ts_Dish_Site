generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessToken {
  id      Int    @id @default(autoincrement())
  name    String
  user_id Int
  users   Users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
}

model DishLikes {
  id         Int      @id @default(autoincrement())
  dish_id    Int
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  dishes     Dishes   @relation(fields: [dish_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model RefreshToken {
  id      Int    @id @default(autoincrement())
  name    String
  user_id Int
  users   Users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
}

model Dishes {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  cuisine     String      @db.VarChar(255)
  slug        String      @db.VarChar(255)
  url         String      @db.VarChar(255)
  ingredients Json
  recipes     Json
  likes       Int         @default(0)
  DishLikes   DishLikes[]
}

model Users {
  id           Int            @id @default(autoincrement())
  name         String
  password     String
  email        String?
  confirmed    Boolean?       @default(false)
  tokens       Json?
  role         String?
  AccessToken  AccessToken[]
  DishLikes    DishLikes[]
  RefreshToken RefreshToken[]
  comments     Comments[]
}

model Comments {
  id         Int       @id @default(autoincrement())
  post_id    Int?
  body       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user_id    Int?
  posts      Posts?    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      Users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Posts {
  id         Int        @id @default(autoincrement())
  title      String
  body       String
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  comments   Comments[]
}
